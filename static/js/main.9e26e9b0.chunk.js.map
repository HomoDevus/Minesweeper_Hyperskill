{"version":3,"sources":["img/logo.svg","context.js","Minesweeper.js","CellsCreate.js","App.js","index.js"],"names":["Context","React","createContext","Timer","props","timeOutput","control","timerCount","getMinutes","getSeconds","map","component","slice","join","Reset","reset","useContext","className","onClick","emoji","FlagsCounter","flags","ControlPanel","src","logo","alt","resetEmoji","Cell","cell","openCell","flag","cellClass","onContextMenu","bombsAround","Field","cells","id","Minesweeper","e","preventDefault","bombPlacer","bombsPositions","position","min","max","i","Math","floor","random","includes","push","bombCreator","field","cellsCreate","bomb","open","cellsCreator","forEach","bombPos","firstRun","closedCells","frozeField","App","useState","setCells","Date","setControl","firstCellBomb","clickedCell","emptyCellOpen","CellPosition","flagAmount","flagCounter","changeCell","cellPos","cellsAround","bombs","CellPos","cellPosition","bombsAmount","style","addObj","applyBombsAround","setTimeout","checkBombsAround","showAllBombs","prev","flagCount","timerStart","status","timerId","setInterval","date","setSeconds","addSecond","prevState","clearInterval","Object","assign","Provider","value","changes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e26e9b0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.41c2f52f.svg\";","import React from \"react\";\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context","import React, {useContext} from 'react';\r\nimport logo from './img/logo.svg';\r\nimport './Minesweeper.css';\r\nimport Context from \"./context\";\r\n\r\nfunction Timer(props) {\r\n    // Transform Date to [min, sec] array\r\n    let timeOutput = ['0' + props.control.timerCount.getMinutes(),\r\n    '0' + props.control.timerCount.getSeconds()].map(component => component.slice(-2));\r\n\r\n    return (\r\n        <div>{timeOutput.join(':')}</div>\r\n    )\r\n}\r\n\r\nfunction Reset(props) {\r\n    const {reset} = useContext(Context)\r\n    return (\r\n        <button className={'reset-button'} onClick={reset}>{props.emoji}</button>\r\n    )\r\n}\r\n\r\nfunction FlagsCounter(props) {\r\n    return (\r\n        <div>{props.control.flags}</div>\r\n    )\r\n}\r\n\r\nfunction ControlPanel(props) {\r\n    return (\r\n        <div className={'cp-outer'}>\r\n            <div className={'cp-heading'}>\r\n                <h2>Minesweeper</h2>\r\n                <img src={logo} className=\"cp-logo\" alt=\"logo\" />\r\n            </div>\r\n            <div className={'cp-control'}>\r\n                <FlagsCounter control={props.control}/>\r\n                <Reset emoji={props.control.resetEmoji}/>\r\n                <Timer control={props.control} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction  Cell(cell) {\r\n    const {openCell, flag} = useContext(Context)\r\n    return (\r\n        <div className={`cell ${cell.props.cellClass}`}\r\n             onClick={() => openCell(cell.props)}\r\n             onContextMenu={() => flag(cell.props)}>{cell.props.bombsAround}</div>\r\n    )\r\n}\r\n\r\nfunction Field(props) {\r\n    return (\r\n        <div className={\"field\"}>\r\n            {props.cells.map(cell => {\r\n                return <Cell key={cell.id} props={cell} />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function Minesweeper(props) {\r\n    return (\r\n        <div className=\"game\" onContextMenu={(e)=>  {e.preventDefault(); return false;}}>\r\n            <ControlPanel control={props.control} />\r\n            <Field cells={props.cells} />\r\n        </div>\r\n    );\r\n}","function getRandomNum(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\nfunction bombCreator() {\r\n    let bombsPositions = []\r\n    let position\r\n    for (let i = 10; i > 0;) {\r\n        position = Math.floor(getRandomNum(0, 71));\r\n        if (!bombsPositions.includes(position)) {\r\n            bombsPositions.push(position);\r\n            i--;\r\n        }\r\n    }\r\n    return bombsPositions\r\n}\r\n\r\nfunction cellsCreator() {\r\n    let cellsCreate = [];\r\n    for (let id = 0; id < 72; id++) {\r\n        cellsCreate.push({id: id, bomb: false, bombsAround: '', flag: false, open: false, cellClass: ''});\r\n    }\r\n    return cellsCreate;\r\n}\r\n\r\nexport default function bombPlacer() {\r\n        let bombsPositions = bombCreator();\r\n        let field = cellsCreator();\r\n        bombsPositions.forEach(function(bombPos) {\r\n            field[bombPos].bomb = true;\r\n        })\r\n        return field\r\n    }","import React from 'react';\r\nimport './App.css';\r\nimport Minesweeper from \"./Minesweeper\";\r\nimport bombPlacer from './CellsCreate';\r\nimport Context from \"./context\";\r\n\r\nlet firstRun = true\r\nlet closedCells = 72\r\nlet frozeField = false\r\n\r\nfunction App() {\r\n    function reset() {\r\n        timerStart(false);\r\n        firstRun = true;\r\n        closedCells = 72;\r\n        frozeField = false;\r\n        setCells(bombPlacer());\r\n        setControl(({timerCount: new Date(0), flags: 10, resetEmoji: '🙂'}))\r\n    }\r\n    // ======== States =======\r\n    const [cells, setCells] = React.useState(bombPlacer());\r\n    const [control, setControl] = React.useState(\r\n        {timerCount: new Date(0), flags: 10, resetEmoji: '🙂'}\r\n        );\r\n    // =======================\r\n\r\n    // ============== Cell open functions ===================\r\n    function getRandomNum(min, max) {\r\n        return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    function firstCellBomb(clickedCell) {\r\n        let position = getRandomNum(0, 71)\r\n        setCells(cells.map(cell => {\r\n            if (cell.id === clickedCell.id) {\r\n                cell.bomb = false\r\n            }\r\n            if (cell.id === position) {\r\n                if (!cell.bomb) {\r\n                    cell.bomb = true\r\n                } else {\r\n                    firstCellBomb(clickedCell)\r\n                }\r\n            }\r\n            return cell\r\n        }))\r\n    }\r\n\r\n    function openCell(clickedCell) {\r\n        // Check if this first running\r\n        if (firstRun) {\r\n            if (clickedCell.bomb) {\r\n                firstCellBomb(clickedCell)\r\n            }\r\n            timerStart(true);\r\n        }\r\n\r\n        // change values and add classes\r\n        firstRun = false\r\n        const CellPosition = clickedCell.id\r\n        const Cell = cells[clickedCell.id]\r\n\r\n        if (Cell.open === false && !frozeField) {\r\n            if (Cell.bomb) {\r\n                setControl(prev => ({...prev, resetEmoji: '😵'}));\r\n                showAllBombs();\r\n            } else {\r\n                emptyCellOpen(CellPosition)\r\n            }\r\n        }\r\n    }\r\n\r\n    function emptyCellOpen(CellPosition) {\r\n        let flagAmount = flagCounter()\r\n        let changes = {open: true, flag: false, cellClass: 'empty'}\r\n        changeCell(CellPosition, changes);\r\n        cellsAround(CellPosition);\r\n        closedCells--\r\n        checkForWin(closedCells)\r\n        setControl(prev => ({...prev, flags: flagAmount}));\r\n    }\r\n\r\n    // Return array with id of cells around\r\n    function cellsAround(cellPos) {\r\n        let cellsAround = [];\r\n\r\n        if (cellPos % 8 !== 0) {cellsAround.push(cellPos - 1)}\r\n        if ((cellPos + 1) % 8 !== 0) {cellsAround.push(cellPos + 1)}\r\n        if ((cellPos + 8) < 72) {cellsAround.push(cellPos + 8)}\r\n        if ((cellPos - 8) > -1) { cellsAround.push(cellPos - 8) }\r\n        if ((cellPos + 9) < 72 && (cellPos + 9) % 8 !== 0) {cellsAround.push(cellPos + 9)}\r\n        if ((cellPos - 9) > -1 && (cellPos - 8) % 8 !== 0) {cellsAround.push(cellPos - 9)}\r\n        if ((cellPos + 7) < 72 && (cellPos + 8) % 8 !== 0) {cellsAround.push(cellPos + 7)}\r\n        if ((cellPos - 7) > -1 && (cellPos - 7) % 8 !== 0) {cellsAround.push(cellPos - 7)}\r\n\r\n        return checkBombsAround(cellPos, cellsAround);\r\n    }\r\n\r\n    // Get central cell and cells around in array from other function and return a number of bombs\r\n    function checkBombsAround(cellPos, cellsAround) {\r\n        let bombs = 0;\r\n\r\n        for (const CellPos of cellsAround) {\r\n            if (cells[CellPos].bomb) {\r\n                bombs++;\r\n            }\r\n        }\r\n        if (bombs !== 0) {\r\n            return applyBombsAround(cellPos, bombs);\r\n        } else {\r\n            for (const CellPos of cellsAround) {\r\n                setTimeout(function() {\r\n                    if (!cells[CellPos].open) {\r\n                        emptyCellOpen(CellPos)\r\n                    }\r\n                }, 0)\r\n            }\r\n        }\r\n    }\r\n    // Get cell and bombs amount from checkBombsAround func. Then adds class for each number its own color\r\n    function applyBombsAround(cellPosition, bombsAmount) {\r\n        let style\r\n        switch (bombsAmount) {\r\n            case 1:\r\n                style = 'one-bomb';\r\n                break;\r\n            case 2:\r\n                style = 'two-bombs';\r\n                break;\r\n            case 3:\r\n                style = 'three-bombs';\r\n                break;\r\n            case 4:\r\n                style = 'four-bombs';\r\n                break;\r\n            case 5:\r\n                style = 'five-bombs';\r\n                break;\r\n            case 6:\r\n                style = 'six-bombs';\r\n                break;\r\n            case 7:\r\n                style = 'seven-bombs';\r\n                break;\r\n            case 8:\r\n                style = 'eight-bombs';\r\n                break;\r\n        }\r\n\r\n        let addObj = {cellClass: `empty ${style}`, bombsAround: bombsAmount}\r\n        changeCell(cellPosition, addObj)\r\n    }\r\n    // =======================================================\r\n\r\n    // ================== Flag functions ======================\r\n\r\n    function flag(clickedCell) {\r\n        const Cell = cells[clickedCell.id]\r\n        let changes = {}\r\n\r\n        if (!Cell.open) {\r\n            if (!Cell.flag && control.flags > 0) {\r\n                changes = {flag: true, cellClass: 'flagged'}\r\n            } else {\r\n                changes = {flag: false, cellClass: ''}\r\n            }\r\n            changeCell(clickedCell.id, changes)\r\n        }\r\n        setControl(prev => ({...prev, flags: flagCounter()}))\r\n    }\r\n\r\n    function flagCounter() {\r\n        let flagCount = 10\r\n\r\n        for (let cell of cells) {\r\n            if (cell.flag) {\r\n                flagCount -= 1\r\n            }\r\n        }\r\n        return flagCount\r\n    }\r\n    // =========================================================\r\n\r\n    // ============== Timer functions ==============\r\n\r\n    function addSecond(date) {\r\n        date.setSeconds(date.getSeconds() + 1)\r\n        return date\r\n    }\r\n\r\n    function timerStart(status) {\r\n\r\n        if (status) {\r\n            let timerId = setInterval(function() {\r\n                let date = addSecond(control.timerCount)\r\n                setControl(prevState => ({...prevState, timerCount: date}))}, 1000)\r\n            setControl(prevState => ({...prevState, timerId: timerId}))\r\n        } else {\r\n            clearInterval(control.timerId);\r\n        }\r\n    }\r\n    // =============================================\r\n    // =============== Win/Lose functions ==========\r\n\r\n    // Checks if closed cells = amount of bombs. If it's true shows all bombs and changes emoji\r\n    function checkForWin(closedCellsAmount) {\r\n        if (closedCellsAmount === 10) {\r\n            showAllBombs();\r\n            setControl(prev => ({...prev, resetEmoji: '🥳'}));\r\n        }\r\n    }\r\n\r\n    function showAllBombs() {\r\n        cells.map(cell => {\r\n            if (cell.bomb === true) {\r\n                let changes = {open: true, flag: false, cellClass: 'bomb'};\r\n                changeCell(cell.id, changes);\r\n                timerStart(false);\r\n                setControl(prev => ({...prev, flags: flagCounter()}));\r\n                frozeField = true;\r\n            }\r\n        })\r\n    }\r\n    // =============================================\r\n    // ========== Often used functions =============\r\n\r\n    // get cell position in an array and array with properties to change and change them\r\n    function changeCell(cellPosition, addObj) {\r\n        setCells(prev => {\r\n            prev[cellPosition] = Object.assign(prev[cellPosition], addObj)\r\n            return prev\r\n        })\r\n    }\r\n    // =============================================\r\n  return (\r\n      <Context.Provider value={{openCell, flag, reset}}>\r\n        <div className=\"App\">\r\n            <Minesweeper cells={cells} control={control} />\r\n        </div>\r\n      </Context.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}